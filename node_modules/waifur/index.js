const puppeteer = require('puppeteer')

async function waifuR(callback) {
    if (!callback) {
        throw new Error('Put a callback in your function.')
    }

    const brower = await puppeteer.launch({
        'args' : [
            '--no-sandbox',
            '--disable-setuid-sandbox'
        ],
        ignoreHTTPSErrors: true
    })
    const [page] = await brower.pages()
    await page.setViewport({
        width: 7680,
        height: 4320
    })

    await page.goto('https://mywaifulist.moe/random', {
        waitUntil: 'networkidle0'
    })

    if (!page.url().includes('https://mywaifulist.moe/')) {
        throw new Error("Could not load page, probably because of network restrictions or by spamming the function.")
    }

    var gan = await page.$('#alternate-name')
    if (gan == null) {
        var gant = null
    } else {
        var gant = await page.evaluate(gan => gan.textContent, gan)

        if (!gant.replace(/\s/g, '').length) {
            var gant = null
        } else {
            var gant = gant;
        }
    }

    var wn = await page.$('#waifu-name')
    if (wn == null) {
        var wnt = null
    } else {
        var wnt = await page.evaluate(wn => wn.textContent, wn)

        if (!wnt.replace(/\s/g, '').length) {
            var wnt = null
        } else {
            var wnt = wnt;
        }
    }

    var rn = await page.$('#romaji-name')
    if (rn == null) {
        var rnt = null
    } else {
        var rnt = await page.evaluate(rn => rn.textContent, rn)

        if (!rnt.replace(/\s/g, '').length) {
            var rnt = null
        } else {
            var rnt = rnt;
        }
    }

    var pg = await page.$('#origin')
    if (pg == null) {
        var pgt = null
    } else {
        var pgt = await page.evaluate(pg => pg.textContent, pg)

        if (!pgt.replace(/\s/g, '').length) {
            var pgt = null
        } else {
            var pgt = pgt;
        }
    }

    var gg = await page.$('#age')
    if (gg == null) {
        var ggt = null
    } else {
        var ggt = await page.evaluate(gg => gg.textContent, gg)

        if (!ggt.replace(/\s/g, '').length) {
            var ggt = null
        } else {
            var ggt = ggt;
        }
    }

    var bd = await page.$('#birthday')
    if (bd == null) {
        var bdt = null
    } else {
        var bdt = await page.evaluate(bd => bd.textContent, bd)

        if (!bdt.replace(/\s/g, '').length) {
            var bdt = null
        } else {
            var bdt = bdt;
        }
    }

    var hg = await page.$('#height')
    if (hg == null) {
        var hgt = null
    } else {
        var hgt = await page.evaluate(hg => hg.textContent, hg)

        if (!hgt.replace(/\s/g, '').length) {
            var hgt = null
        } else {
            var hgt = hgt;
        }
    }

    var wg = await page.$('#weight')
    if (wg == null) {
        var wgt = null
    } else {
        var wgt = await page.evaluate(wg => wg.textContent, wg)

        if (!wgt.replace(/\s/g, '').length) {
            var wgt = null
        } else {
            var wgt = wgt;
        }
    }

    var btg = await page.$('#blood-type')
    if (btg == null) {
        var btgt = null
    } else {
        var btgt = await page.evaluate(btg => btg.textContent, btg)

        if (!btgt.replace(/\s/g, '').length) {
            var btgt = null
        } else {
            var btgt = btgt;
        }
    }

    var bsg = await page.$('#bust')
    if (bsg == null) {
        var bsgt = null
    } else {
        var bsgt = await page.evaluate(bsg => bsg.textContent, bsg)

        if (!bsgt.replace(/\s/g, '').length) {
            var bsgt = null
        } else {
            var bsgt = bsgt;
        }
    }

    var wasg = await page.$('#waist')
    if (wasg == null) {
        var wasgt = null
    } else {
        var wasgt = await page.evaluate(wasg => wasg.textContent, wasg)

        if (!wasgt.replace(/\s/g, '').length) {
            var wasgt = null
        } else {
            var wasgt = wasgt;
        }
    }

    var hipg = await page.$('#hip')
    if (hipg == null) {
        var hipgt = null
    } else {
        var hipgt = await page.evaluate(hipg => hipg.textContent, hipg)

        if (!hipgt.replace(/\s/g, '').length) {
            var hipgt = null
        } else {
            var hipgt = hipgt;
        }
    }

    var descg = await page.$('#description')
    if (descg == null) {
        var descgt = null
    } else {
        var descgt = await page.evaluate(descg => descg.textContent, descg)

        if (!descgt.replace(/\s/g, '').length) {
            var descgt = null
        } else {
            var descgt = descgt;
        }
    }

    var apg = await page.$('.trigger')
    if (apg == null) {
        var apgt = null
    } else {
        var apgt = await page.evaluate(apg => apg.textContent, apg)

        if (!apgt.replace(/\s/g, '').length) {
            var apgt = null
        } else {
            var apgt = apgt;
        }
    }

    var sjf = await page.$$eval('.object-center', e => e.map(b => b.getAttribute('src')));
    if (sjf.length > 1) {
        var asdgt = null
    } else {
        try {
            var asdgt = sjf[0];
        } catch (err) {
            var asdgt = null
        }
    }

    try {
        var data = {
            "alternate_name": gant ? gant.trim() : null,
            "name": wnt ? wnt.trim() : null,
            "romaji_name": rnt ? rnt.trim() : null,
            "origin": pgt ? pgt.trim() : null,
            "age": ggt ? ggt.trim() : null,
            "birthday": bdt ? bdt.trim() : null,
            "height": hgt ? hgt.trim() : null,
            "weight": wgt ? wgt.trim() : null,
            "blood_type": btgt ? btgt.trim() : null,
            "bust": bsgt ? bsgt.trim() : null,
            "waist": wasgt ? wasgt.trim() : null,
            "hip": hipgt ? hipgt.trim() : null,
            "description": descgt ? descgt.trim() : null,
            "appears_in": apgt ? apgt.trim() : null,
            "background_image": asdgt ? asdgt.trim() : null
        }
        callback(data)
    } catch (err) {
        throw new Error('Failed to get data, please try again.')
    }
    page.close();
    await brower.close();
}

module.exports.waifuR = waifuR;